generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hawker {
  id        String   @id @default(cuid())
  name      String
  address   String
  imageUrl  String?
  tables    Table[]
  stalls    Stall[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id        String   @id @default(cuid())
  hawkerId  String
  number    String
  qrCode    String   @unique
  isActive  Boolean  @default(true)
  hawker    Hawker   @relation(fields: [hawkerId], references: [id])
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hawkerId, number])
  @@index([hawkerId])
}

model Stall {
  id          String      @id @default(cuid())
  hawkerId    String
  name        String
  description String?
  imageUrl    String?
  qrCode      String      @unique
  phoneNumber String
  isActive    Boolean     @default(true)
  menu        MenuItem[]
  orders      Order[]
  owner       StallOwner?
  hawker      Hawker      @relation(fields: [hawkerId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([hawkerId])
}

model StallOwner {
  id             String   @id @default(cuid())
  stallId        String   @unique
  name           String
  email          String   @unique
  phoneNumber    String   @unique
  hashedPassword String
  isActive       Boolean  @default(true)
  stall          Stall    @relation(fields: [stallId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([phoneNumber])
}

model MenuItem {
  id          String      @id @default(cuid())
  stallId     String
  name        String
  nameZh      String?
  nameMy      String?
  nameTa      String?
  description String?
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?
  isAvailable Boolean     @default(true)
  category    String
  orderItems  OrderItem[]
  stall       Stall       @relation(fields: [stallId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([stallId])
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  tableId       String
  stallId       String
  customerId    String?
  items         OrderItem[]
  status        OrderStatus   @default(PENDING)
  totalAmount   Decimal       @db.Decimal(10, 2)
  paymentMode   PaymentMode
  table         Table         @relation(fields: [tableId], references: [id])
  stall         Stall         @relation(fields: [stallId], references: [id])
  customer      Customer?     @relation(fields: [customerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentStatus PaymentStatus @default(PENDING)
  paidAt        DateTime?
  payments      Payment[]

  @@index([tableId])
  @@index([stallId])
  @@index([status])
  @@index([customerId])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  transactionId String        @unique
  status        PaymentStatus @default(PENDING)
  amount        Decimal?
  createdAt     DateTime      @default(now())
  completedAt   DateTime
  metadata      Json?

  @@index([orderId])
  @@index([transactionId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id                  String   @id @default(cuid())
  orderId             String
  menuItemId          String
  quantity            Int
  price               Decimal  @db.Decimal(10, 2)
  specialInstructions String?
  order               Order    @relation(fields: [orderId], references: [id])
  menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
  createdAt           DateTime @default(now())

  @@index([orderId])
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentMode {
  CASH
  PAYNOW
  GRABPAY
  PAYLAH
}

model Customer {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  name        String
  email       String?
  joinedAt    DateTime @default(now())
  orders      Order[]

  @@index([phoneNumber])
}

model PushToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  userType  String // 'customer' or 'vendor'
  platform  String // 'ios' or 'android'
  isActive  Boolean  @default(true)
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([token])
}

model NotificationPreference {
  id           String   @id @default(cuid())
  userId       String   @unique
  orderUpdates Boolean  @default(true)
  promotions   Boolean  @default(true)
  newFeatures  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model NotificationTicket {
  id             String   @id @default(cuid())
  ticketId       String   @unique
  userId         String
  status         String
  message        Json
  receiptChecked Boolean  @default(false)
  receiptStatus  String?
  createdAt      DateTime @default(now())

  @@index([userId])
  @@index([ticketId])
}
