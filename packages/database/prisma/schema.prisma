generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hawker {
  id           String   @id @default(cuid())
  name         String
  latitude     Float
  longitude    Float
  address      String
  imageUrl     String?
  coverImage   String?
  openingTime  String // e.g., "06:00"
  closingTime  String // e.g., "22:00"
  amenities    String[] // ["Parking", "WiFi", "AirCon", "Halal"]
  tags         String[] // ["Heritage", "24Hours", "Tourist-Friendly"]
  region       String // "Central", "North", "South", "East", "West"
  rating       Float    @default(0)
  totalReviews Int      @default(0)
  isActive     Boolean  @default(true)
  tables       Table[]
  stalls       Stall[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([region])
  @@index([name])
}

model Table {
  id        String   @id @default(cuid())
  hawkerId  String
  number    String
  qrCode    String   @unique
  isActive  Boolean  @default(true)
  hawker    Hawker   @relation(fields: [hawkerId], references: [id])
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hawkerId, number])
  @@index([hawkerId])
}

model Stall {
  id          String     @id @default(cuid())
  hawkerId    String
  name        String
  description String?
  imageUrl    String?
  qrCode      String     @unique
  phoneNumber String
  isActive    Boolean    @default(true)
  cuisine     String // "Chinese", "Malay", "Indian", "Western", "Drinks"
  specialties String[] // ["Chicken Rice", "Char Kway Teow"]
  rating      Float      @default(0)
  priceRange  Int // 1-3 ($ to $$$)
  images      String[] // Multiple food images
  reviews     Review[]
  favorites   Favorite[]

  // POS Integration fields
  posType      String?
  posConfig    Json?
  lastMenuSync DateTime?

  menu     MenuItem[]
  orders   Order[]
  owner    StallOwner?
  hawker   Hawker       @relation(fields: [hawkerId], references: [id])
  syncLogs POSSyncLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hawkerId])
  @@index([cuisine])
  @@index([rating])
}

model Review {
  id         String   @id @default(cuid())
  stallId    String
  customerId String
  rating     Int // 1-5
  comment    String?
  images     String[]
  stall      Stall    @relation(fields: [stallId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([stallId, customerId])
}

model Favorite {
  id         String   @id @default(cuid())
  customerId String
  stallId    String
  customer   Customer @relation(fields: [customerId], references: [id])
  stall      Stall    @relation(fields: [stallId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([customerId, stallId])
}

model SearchHistory {
  id         String   @id @default(cuid())
  customerId String
  query      String
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())

  @@index([customerId])
}

model StallOwner {
  id             String   @id @default(cuid())
  stallId        String   @unique
  name           String
  email          String   @unique
  phoneNumber    String   @unique
  hashedPassword String
  isActive       Boolean  @default(true)
  stall          Stall    @relation(fields: [stallId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([phoneNumber])
}

model MenuItem {
  id      String @id @default(cuid())
  stallId String

  // External POS reference
  externalId   String?
  lastSyncedAt DateTime?

  name        String
  nameZh      String?
  nameMy      String?
  nameTa      String?
  description String?
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?
  isAvailable Boolean     @default(true)
  category    String
  orderItems  OrderItem[]
  stall       Stall       @relation(fields: [stallId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([stallId])
  @@index([externalId])
  @@index([stallId, externalId])
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  tableId     String
  stallId     String
  customerId  String?
  items       OrderItem[]
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  paymentMode PaymentMode

  // POS Integration tracking
  metadata      Json?
  table         Table         @relation(fields: [tableId], references: [id])
  stall         Stall         @relation(fields: [stallId], references: [id])
  customer      Customer?     @relation(fields: [customerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentStatus PaymentStatus @default(PENDING)
  paidAt        DateTime?
  payments      Payment[]

  @@index([tableId])
  @@index([stallId])
  @@index([status])
  @@index([customerId])
}

model POSSyncLog {
  id          String    @id @default(cuid())
  stallId     String
  stall       Stall     @relation(fields: [stallId], references: [id])
  syncType    String // 'menu' | 'order' | 'inventory'
  status      String // 'success' | 'failed' | 'partial'
  itemsSynced Int?
  errors      Json?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  @@index([stallId])
  @@index([createdAt])
}

model WebhookEvent {
  id          String    @id @default(cuid())
  source      String // 'storehub' | 'square' | 'whatsapp'
  eventType   String
  payload     Json
  processed   Boolean   @default(false)
  processedAt DateTime?
  error       String?
  createdAt   DateTime  @default(now())

  @@index([processed])
  @@index([source])
  @@index([createdAt])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  transactionId String        @unique
  status        PaymentStatus @default(PENDING)
  amount        Decimal?
  createdAt     DateTime      @default(now())
  completedAt   DateTime
  metadata      Json?

  @@index([orderId])
  @@index([transactionId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id                  String   @id @default(cuid())
  orderId             String
  menuItemId          String
  quantity            Int
  price               Decimal  @db.Decimal(10, 2)
  specialInstructions String?
  order               Order    @relation(fields: [orderId], references: [id])
  menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
  createdAt           DateTime @default(now())

  @@index([orderId])
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentMode {
  CASH
  PAYNOW
  GRABPAY
  PAYLAH
}

model Customer {
  id            String          @id @default(cuid())
  phoneNumber   String          @unique
  name          String
  email         String?
  joinedAt      DateTime        @default(now())
  orders        Order[]
  Review        Review[]
  Favorite      Favorite[]
  SearchHistory SearchHistory[]

  @@index([phoneNumber])
}

model PushToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  userType  String // 'customer' or 'vendor'
  platform  String // 'ios' or 'android'
  isActive  Boolean  @default(true)
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([token])
}

model NotificationPreference {
  id           String   @id @default(cuid())
  userId       String   @unique
  orderUpdates Boolean  @default(true)
  promotions   Boolean  @default(true)
  newFeatures  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model NotificationTicket {
  id             String   @id @default(cuid())
  ticketId       String   @unique
  userId         String
  status         String
  message        Json
  receiptChecked Boolean  @default(false)
  receiptStatus  String?
  createdAt      DateTime @default(now())

  @@index([userId])
  @@index([ticketId])
}
